version: 2.1

refs:
  only_master: &only_master
    filters:
      branches:
        only: master

aliases:
  - &appdir
    working_directory: "symphony/app"

  - &require_approval
    requires:
      - magma-hold

  - &require_test
    requires:
      - ci-build
      - feg-precommit
      - cwag-precommit
      - cwf-integ-test
      - cloud-test
      - orc8r-gateway-test
      - lte-integ-test
      - insync-checkin
      - fossa-analyze
      - nms-yarn-test
      - nms-flow-test

  - &ignore_master
    filters:
      branches:
        ignore: master

  - &magma_conditional
    build/determinator:
      paths: "fbcode/magma/magma fbcode/orc8r"

executors:
  node:
    docker:
      - image: circleci/node:10-buster-browsers-legacy

orbs:
  artifactory: circleci/artifactory@0.0.7
  slack: circleci/slack@3.4.2

  docker:
    commands:
      build: &docker_build
        parameters:
          after_checkout:
            description: Optional steps to run after checkout.
            type: steps
            default: []
          dockerfile:
            description: Name of dockerfile to use.
            type: string
          dockercontext:
            description: Path to the directory containing your build context.
            type: string
            default: fbcode
          extra_build_args:
            description: >
              Extra flags to pass to docker build. For examples, see
              https://docs.docker.com/engine/reference/commandline/build
            type: string
            default: ""
        steps:
          - checkout
          - when:
              name: Run after_checkout lifecycle hook steps.
              condition: <<parameters.after_checkout>>
              steps: <<parameters.after_checkout>>
          - run:
              name: Build Docker Image
              command: |
                  docker build \
                  <<#parameters.extra_build_args>><<parameters.extra_build_args>><</parameters.extra_build_args>> \
                  -f <<parameters.dockerfile>> \
                  <<parameters.dockercontext>>

      install-dc:
        parameters:
          compose_version:
            description: Docker-compose version to install
            type: string
            default: '1.25.4'
        steps:
          - run:
              name: Install Docker Compose
              command: |
                sudo curl -L https://github.com/docker/compose/releases/download/<<parameters.compose_version>>/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
                sudo chmod +x ~/docker-compose
                sudo mv ~/docker-compose /usr/local/bin/docker-compose

  helm:
    commands:
      install:
        steps:
          - run:
              name: Install Helm
              command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      init:
        steps:
          - run:
              name: Helm Init
              command: helm init --client-only
      lint:
        parameters:
          path:
            description: Path to the directory containing helm chart.
            type: string
        steps:
          - run:
              name: Lint Chart
              command: helm lint --strict <<parameters.path>>
      package:
        parameters:
          path:
            description: Path to the directory containing helm chart.
            type: string
        steps:
          - run:
              name: Package Chart
              command: |
                pkg=$(helm package --save=false <<parameters.path>> | awk '{ print $NF }')
                eval echo 'export HELM_PACKAGE=$pkg' >> $BASH_ENV
      publish:
        parameters:
          url:
            description: Base URL of repository to use.
            type: string
            default: https://facebookconnectivity.jfrog.io/facebookconnectivity
          repository:
            description: Name of local helm repository.
            type: string
            default: helm-local
        steps:
          - run:
              name: Publish Chart
              command: |
                : "${ARTIFACTORY_API_KEY?Artifactory API Key must be set as Environment variable.}"
                : "${HELM_PACKAGE?Helm Package Key must be set as Environment variable.}"
                sha1=$(sha1sum $HELM_PACKAGE | awk '{ print $1 }')
                md5=$(md5sum $HELM_PACKAGE | awk '{ print $1 }')
                curl -T $HELM_PACKAGE -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" -H "X-Checksum-Sha1:$sha1" -H "X-Checksum-Md5:$md5" <<parameters.url>>/<<parameters.repository>>/$(basename $HELM_PACKAGE)
          - run:
              name: Recalculate Repository Index
              command: curl -X POST -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" <<parameters.url>>/api/helm/<<parameters.repository>>/reindex
    jobs:
      lint:
        docker:
          - image: circleci/golang
        parameters:
          path:
            description: Path to the directory containing helm chart.
            type: string
          after_checkout:
            description: Optional steps to run after checkout.
            type: steps
            default: []
        steps:
          - checkout
          - when:
              name: Run after_checkout lifecycle hook steps.
              condition: <<parameters.after_checkout>>
              steps: <<parameters.after_checkout>>
          - install
          - lint:
              path: <<parameters.path>>

  build:
    commands:
      determinator:
        parameters:
          paths:
            description: Space seperated list of paths to tests against.
            type: string
        steps:
          - run:
              name: Checking for changes
              command: |
                if [[ -z '<<parameters.paths>>' ]] ; then
                  echo "no targets determinator"
                  exit 0
                fi
                paths=".circleci <<parameters.paths>>"
                echo "Checking paths [$paths]"
                for path in $paths; do
                  if [[ $(git diff master^ --name-only $path) ]]; then
                    echo "Found changes in $path"
                    exit 0
                  fi
                done
                echo "No changes in [$paths]"
                circleci step halt

      magma-build-shortcircuit:
        parameters:
          stack:
            description: Stack (lte or cwf) to short circuit for
            type: string
          build:
            type: string
        steps:
          - attach_workspace:
              at: /tmp/workspace
          - run:
              name: Short-circuit build job if test was skipped
              command: |
                if [[ "<<parameters.build>>" == "True" ]]; then
                  if [[ -f /tmp/workspace/<<parameters.stack>>_test_status ]]; then
                    test_status=$(cat /tmp/workspace/<<parameters.stack>>_test_status)
                    if [[ "${test_status}" == "SKIP" ]]; then
                      echo "The upstream integration test job was skipped, will skip the build job as well"
                      circleci step halt
                    fi
                  fi
                fi

commands:
  magma_slack_notify:
    description: Notify Slack on magma job failure
    steps:
      - run:
          command: |
            echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
          name: Slack - Setting Failure Condition
          when: on_fail
      - run:
          command: |
            echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
          name: Slack - Setting Success Condition
          when: on_success
      - run:
          name: Send message to Slack
          command: |
            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            gh_text="Github Commit <https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}>"
            set +o pipefail
            rev=$(git show -s --format='%B' "${CIRCLE_SHA1}" | grep "Differential Revision" | sed 's/^ *Differential Revision: //g')
            set -o pipefail
            if [[ "${rev}" == "" ]]; then
              rev_text="No Differential Revision Found"
            else
              rev_text="Differential Revision: <https://phabricator.intern.facebook.com/${rev}|${rev}>"
            fi

            pretext="Job \`${CIRCLE_JOB}\` #${CIRCLE_BUILD_NUM} on branch \`${CIRCLE_BRANCH}\` of ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} failed. Check the <${CIRCLE_BUILD_URL}|build logs> for details."
            color="#8b0902"

            slack_data=$(cat \<<EOF
            {
              "text": "*CircleCI Job Failure*",
              "attachments": [
                {
                  "color": "${color}",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI job failure notification",
                  "fields": [
                    {
                      "title": "Revision",
                      "value": "${rev_text}\n${gh_text}",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            echo $slack_data

            if [ "$SLACK_BUILD_STATUS" = "fail" ]; then
              curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK}"
            else
              echo "This command will only execute on failure."
            fi
          when: always

  run-with-retry:
    description: Run command with retry
    parameters:
      command:
        description: Command to run
        type: string
      workdir:
        description: Path to cd into
        type: string
      retry-count:
        description: Number of retry
        type: integer
        default: 3
      sleep:
        description: Wait duration until next retry
        type: integer
        default: 5
    steps:
      - run: |
          retry() {
             MAX_RETRY=<< parameters.retry-count >>
             n=0
             until [ $n -ge $MAX_RETRY ]
             do
                "$@" && break
                n=$[$n+1]
                sleep << parameters.sleep >>
             done
             if [ $n -ge $MAX_RETRY ]; then
               echo "failed: ${@}" >&2
               exit 1
             fi
          }
          cd << parameters.workdir >>
          retry << parameters.command >>

  tag-push-docker:
    description: Tag docker image and push it
    parameters:
      tag:
        description: Containers to tag and push
        type: string
        default: ${CIRCLE_SHA1:0:8}
      registry:
        description: Registry to push to
        type: string
        default: ${DOCKER_REGISTRY}
      project:
        description: Project images are linked to
        type: string
        default: ""
      images:
        description: Images you want to tag and push separated by |
        type: string
      tag-latest:
        default: false
        type: boolean
    steps:
      - run: |
          IMAGES="<< parameters.images >>"
          IMAGES_ARRAY=($(echo $IMAGES | tr "|" "\n"))
          PROJECT=<< parameters.project >>
          DOCKER_REGISTRY=<< parameters.registry >>
          TAG=<< parameters.tag >>
          TAG_LATEST=<< parameters.tag-latest >>
          for IMAGE in "${IMAGES_ARRAY[@]}"; do
            IMAGE_TOSEARCH=$IMAGE
            if [ ! -z $PROJECT ]; then
              IMAGE_TOSEARCH="${PROJECT}_${IMAGE}"
            fi
            IMAGE_ID=$(docker images "$IMAGE_TOSEARCH:latest" --format "{{.ID}}")
            docker tag "$IMAGE_ID" "${DOCKER_REGISTRY}/$IMAGE:$TAG"
            if [ "$TAG_LATEST" = true ]; then
              docker tag "$IMAGE_ID" "${DOCKER_REGISTRY}/$IMAGE:latest"
            fi
            echo "Pushing ${DOCKER_REGISTRY}/$IMAGE:$TAG"
            docker push "${DOCKER_REGISTRY}/$IMAGE:$TAG"
          done

  publish_docker_image: &publish_docker_image
    parameters:
      build_paths:
        description: Space seperated list of paths changes of which trigger jobs execution.
        type: string
        default: ""
      build_name:
        description: Name used in artifactory build integration.
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      dockerfile:
        description: Name of dockerfile to use.
        type: string
        default: Dockerfile
      dockercontext:
        description: Path to the directory containing your build context.
        type: string
        default: .
      image:
        description: Name of image to create.
        type: string
      tag:
        description: Value for tag to use. Defaults to differential number extracted from commit message.
        type: string
        default: ""
      registry:
        description: Name of registry to use.
        type: string
        default: facebookconnectivity-docker.jfrog.io
      repository:
        description: Remote repsository name in artifactory.
        type: string
        default: docker
      after_publish:
        description: Optional steps to run after publishing the docker image.
        type: steps
        default: []
      extra_build_args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ""
    steps:
      - checkout
      - build/determinator:
          paths: <<parameters.build_paths>>
      - artifactory/install
      - artifactory/configure
      - run:
          name: Resolve Build Information
          command: |
            build_num=$(git log -1 --pretty=%B  | awk '$1 == "Differential" { print $NF }')
            if [ -z $build_num ]; then
              build_num=$CIRCLE_BUILD_NUM
            fi
            commit_date=$(git log -1 --pretty=%ad)
            commit_hash=$(git log -1 --pretty=%h)
            eval echo 'export BUILD_NUM=$build_num' >> $BASH_ENV
            eval echo 'export COMMIT_DATE=\"$commit_date\"' >> $BASH_ENV
            eval echo 'export COMMIT_HASH=\"$commit_hash\"' >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: |
              docker build \
              <<#parameters.extra_build_args>><<parameters.extra_build_args>><</parameters.extra_build_args>> \
              --build-arg BUILD_NUM=${BUILD_NUM} \
              -f <<parameters.dockerfile>> -t \
              <<parameters.registry>>/<<parameters.image>>:latest \
              <<parameters.dockercontext>>
      - artifactory/docker-publish:
          build-integration: false
          build-name: <<parameters.build_name>>
          build-number: $BUILD_NUM
          docker-registry: <<parameters.registry>>
          docker-tag: <<parameters.registry>>/<<parameters.image>>:latest
          repository: <<parameters.repository>>
      - run:
          name: Resolve Docker Tag
          command: |
            tag="<<parameters.tag>>"
            if [ -z $tag ]; then
              tag=$(git log -1 --pretty=%B  | awk '$1 == "Differential" { print $NF }')
              if [ -z $tag ]; then
                tag=$CIRCLE_SHA1
              fi
            fi
            eval echo 'export DOCKER_TAG=$tag' >> $BASH_ENV
      - run:
          name: Publish Tagged Image
          command: |
            if [ "$DOCKER_TAG" != "latest" ]; then
              docker tag <<parameters.registry>>/<<parameters.image>>:latest <<parameters.registry>>/<<parameters.image>>:$DOCKER_TAG
              jfrog rt dp <<parameters.registry>>/<<parameters.image>>:$DOCKER_TAG <<parameters.repository>> --build-name=<<parameters.build_name>> --build-number=$BUILD_NUM
            fi
      - artifactory/build-integration:
          build-name: <<parameters.build_name>>
          build-number: $BUILD_NUM
          include-env: true
          include-git: true
      - when:
          name: Run after_publish lifecycle hook steps.
          condition: <<parameters.after_publish>>
          steps: <<parameters.after_publish>>

  publish_helm_chart: &publish_helm_chart
    parameters:
      path:
        description: Path to the directory containing helm chart.
        type: string
      url:
        description: Base URL of repository to use.
        type: string
        default: https://facebookconnectivity.jfrog.io/facebookconnectivity
      repository:
        description: Name of local helm repository.
        type: string
        default: helm-local
      after_publish:
        description: Optional steps to run after publishing the helm chart.
        type: steps
        default: []
    steps:
      - checkout
      - build/determinator:
          paths: <<parameters.path>>
      - helm/install
      - helm/lint:
          path: <<parameters.path>>
      - helm/package:
          path: <<parameters.path>>
      - helm/publish:
          url: <<parameters.url>>
          repository: <<parameters.repository>>
      - when:
          name: Run after_publish lifecycle hook steps.
          condition: <<parameters.after_publish>>
          steps: <<parameters.after_publish>>

  magma_integ_test:
    parameters:
      stack:
        description: Which stack to run integ tests for (cwf, lte)
        type: string
      test:
        description: Should run tests (True, False)
        type: string
      build:
        description: Should build deployment artifacts (True, False)
        type: string
      deploy:
        description: Should deploy artifacts (True, False)
        type: string
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - build/magma-build-shortcircuit:
         stack: <<parameters.stack>>
         build: <<parameters.build>>
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y openvpn
      - run:
          name: Configure and start VPN client
          command: |
            echo $MAGMA_OVPN_CONF | base64 -d - > ciworker.conf
            sudo mv ciworker.conf /etc/openvpn/client.conf
            sudo service openvpn@client restart
      - run:
          name: Decode and set secrets
          command: |
            cd ${MAGMA_ROOT}/circleci
            echo $MAGMA_NODE_PKEY | base64 -d - > ci_node.pem
            chmod 0400 ci_node.pem
            echo $MAGMA_API_CERT | base64 -d - > ci_operator.pfx
            openssl pkcs12 -in ci_operator.pfx -nocerts -out ci_operator.key.pem -nodes -passin pass:
            openssl pkcs12 -in ci_operator.pfx -nokeys -out ci_operator.pem -passin pass:

            echo $MAGMA_ROOTCA | base64 -d - > rootCA.pem
            echo $MAGMA_CONTROL_PROXY | base64 -d - > control_proxy.yml

            echo $MAGMA_JFROG_APIKEY > jfrog_key
            echo $MAGMA_CIRCLECI_KEY > circleci_key

            echo export AWS_DEFAULT_REGION="us-east-1" >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv MAGMA_DEPLOY_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv MAGMA_DEPLOY_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
      - run:
          name: Select python 3.7.0
          command: pyenv global 3.7.0
      - run:
          name: Install python prerequisites
          command: pip3 install fabric3 jsonpickle requests PyYAML awscli
      # sleep 10 just in case the vpn client takes time to spin up
      - run:
          name: Run remote integ test
          command: |
            sleep 10
            cd ${MAGMA_ROOT}/circleci
            fab <<parameters.stack>> integ_test:repo=${CIRCLE_REPOSITORY_URL},branch=${CIRCLE_BRANCH},sha1=${CIRCLE_SHA1},magma_root=fbcode/magma/magma,run_integ_test=<<parameters.test>>,build_package=<<parameters.build>>,deploy_artifacts=<<parameters.deploy>>
            mkdir -p versions
            # CircleCI will fail the persist job if nothing is available to persist
            # We only need to persist the version file if we built/deployed an
            # artifact but the job can't be conditional. So we'll just always
            # output something
            echo "<<parameters.stack>>" > <<parameters.stack>>_mock_version
            cp *_version versions || true
      - store_artifacts:
          path: /tmp/logs
      - persist_to_workspace:
          root: ~/project/fbcode/magma/magma/circleci
          paths:
            - versions/*
            - <<parameters.stack>>_test_status
      - run:
          name: Double-check that the node is freed
          command: |
            cd ${MAGMA_ROOT}/circleci
            lease_id=$(cat lease_id.out)
            lease_node=$(cat lease_node.out)
            curl -X POST "https://api-staging.magma.etagecom.io/magma/v1/ci/nodes/${lease_node}/release/${lease_id}" -k --key ci_operator.key.pem --cert ci_operator.pem || true
          when: always
      - magma_slack_notify

  docker_repo_login:
    parameters:
      docker_repo:
        description: The base url of the docker repository to pull from
        type: string
      user:
        description: The username to use to log in to the repo
        type: env_var_name
        default: ARTIFACTORY_USER
      api_key:
        description: The api key to use to log in to the repo
        type: env_var_name
        default: ARTIFACTORY_API_KEY
    steps:
      - run:
          name: Log in to Artifactory
          command: |
            docker login -u ${<< parameters.user >>} -p ${<< parameters.api_key >>} << parameters.docker_repo >>

  yarn-install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "symphony/app/yarn.lock" }}
      - run:
          name: Install Dependencies
          <<: *appdir
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "symphony/app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

jobs:
  integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y openvpn
      - run:
          name: Configure and start VPN client
          command: |
            echo $OVPN_CONF | base64 -d - > ciworker.conf
            sudo mv ciworker.conf /etc/openvpn/client.conf
            sudo service openvpn@client restart
      - run:
          name: Decode and set secrets
          command: |
            cd ${MAGMA_ROOT}/circleci
            echo $NODE_PKEY | base64 -d - > ci_node.pem
            chmod 0400 ci_node.pem
            echo $API_CERT | base64 -d - > ci_operator.pfx
            openssl pkcs12 -in ci_operator.pfx -nocerts -out ci_operator.key.pem -nodes -passin pass:
            openssl pkcs12 -in ci_operator.pfx -nokeys -out ci_operator.pem -passin pass:

            echo $PROD_ROOTCA | base64 -d - > rootCA.pem
            echo $PROD_CONTROL_PROXY | base64 -d - > control_proxy.yml

            echo export AWS_DEFAULT_REGION="us-east-1" >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv DEPLOY_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv DEPLOY_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
      - run:
          name: Select python 3.7.0
          command: pyenv global 3.7.0
      - run:
          name: Install python prerequisites
          command: pip3 install fabric3 jsonpickle requests PyYAML awscli
      # sleep 10 just in case the vpn client takes time to spin up
      - run:
          name: Run remote integ test
          command: |
            sleep 10
            cd ${MAGMA_ROOT}/circleci
            fab lte integ_test:branch=${CIRCLE_BRANCH},sha1=${CIRCLE_SHA1}

  ci-build:
    docker:
      - image: circleci/node
    environment:
      - BUILD_PATH=/home/circleci/project/circleci/docker
    steps:
      - checkout
      - build/determinator:
          paths: "/home/circleci/project/circleci/docker"
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            cd $BUILD_PATH
            docker build -t builder -f builder/Dockerfile ./
      - run: echo "test"
      - run: docker login "$DOCKER_CI_REGISTRY" -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - tag-push-docker:
          images: "builder"
          registry: "$DOCKER_CI_REGISTRY"
          tag-latest: true

  feg-precommit:
    docker:
      - image: circleci/golang:1.13-stretch-node-browsers-legacy
    environment:
      - GO111MODULE=on
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          name: make feg precommit
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway precommit

  cwag-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway precommit

  cwf-operator-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/k8s/cwf_operator
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator
            make -C ${MAGMA_ROOT}/cwf/k8s/cwf_operator precommit
      - magma_slack_notify

  cwf-integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - magma_integ_test:
          stack: cwf
          test: 'True'
          build: 'False'
          deploy: 'False'

  cloud-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -t

  orc8r-gateway-test:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/gateway/go
            go test ./...
            go vet ./...

  lte-test:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - PYTHON_BUILD=${MAGMA_ROOT}/build
      - PIP_CACHE_HOME=${MAGMA_ROOT}/.pipcache
      - MAGMA_DEV_MODE=1
      - SKIP_SUDO_TESTS=1
      - CODEGEN_ROOT=/home/circleci/project/.codegen
      - SWAGGER_CODEGEN_JAR=/home/circleci/project/.codegen/swagger-codegen-cli.jar
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: echo $MAGMA_ROOT
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y libsystemd-dev pkg-config curl zip unzip
      - run: sudo apt-get install -y virtualenv python-babel python-dev build-essential python3-setuptools python-setuptools autogen autoconf libtool python3-apt python3-aioeventlet python3-requests python3-pip python-protobuf
      - run:
          command: |
            sudo curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
            sudo unzip protoc3.zip -d protoc3
            sudo mv protoc3/bin/protoc /bin/protoc
            sudo chmod a+rx /bin/protoc
            sudo mv protoc3/include/google /usr/include/
            sudo chmod -R a+Xr /usr/include/google
            sudo rm -rf protoc3.zip protoc3
            mkdir ${CODEGEN_ROOT}
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.3/swagger-codegen-cli-2.2.3.jar -O $SWAGGER_CODEGEN_JAR
            make -C $MAGMA_ROOT/lte/gateway/python test_all

  lte-integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - magma_integ_test:
          stack: lte
          test: 'True'
          build: 'False'
          deploy: 'False'

  insync-checkin:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /tmp/magma
    environment:
      - MAGMA_ROOT=/tmp/magma
      - MAGMA_MODULES_FILE=/tmp/magma/circleci/modules.yml
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -g
      - run: sudo chown -R circleci $MAGMA_ROOT/*
      - run: git add .
      - run: git status
      - run: git diff-index --quiet HEAD

  orc8r-core-build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            pip3 install PyYAML
            python3 build.py -nc

  orc8r-noncore-build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -nc

  cwf-operator-build:
    docker:
      - image: facebookconnectivity-ci.jfrog.io/builder:latest
        auth:
          username: $JFROG_LOGIN
          password: $JFROG_PASSWORD
    environment:
      - NMS_ROOT=/root/project/magma/symphony/app/fbcnms-projects/magmalte
      - MAGMA_MODULES_FILE=/root/project/circleci/modules.yml
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login "$DOCKER_MAGMA_REGISTRY" -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator/docker
            DOCKER_REGISTRY=cwf_ docker-compose build --parallel
      - tag-push-docker:
          project: cwf
          images: "operator"
          registry: $DOCKER_MAGMA_REGISTRY
      - magma_slack_notify

  orc8r-build:
    docker:
      - image: facebookconnectivity-ci.jfrog.io/builder:latest
        auth:
          username: $JFROG_LOGIN
          password: $JFROG_PASSWORD
    environment:
      - MAGMA_MODULES_FILE=/root/project/circleci/modules.yml
      - MODULE_DIR=/root/project/
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login "$DOCKER_REGISTRY" -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -a --nocache --parallel
      - tag-push-docker:
          project: orc8r
          images: "nginx|proxy|controller|prometheus-configurer|alertmanager-configurer"
      - magma_slack_notify

  nms-build:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - NMS_ROOT=${MAGMA_ROOT}/symphony/app/fbcnms-projects/magmalte
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/symphony/app/fbcnms-projects/magmalte
            docker-compose build magmalte

  nms-build-deploy:
    docker:
      - image: facebookconnectivity-ci.jfrog.io/builder:latest
        auth:
          username: $JFROG_LOGIN
          password: $JFROG_PASSWORD
    environment:
      - NMS_ROOT=/root/project/symphony/app/fbcnms-projects/magmalte
      - MAGMA_MODULES_FILE=/root/project/circleci/modules.yml
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login "$DOCKER_REGISTRY" -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/symphony/app/fbcnms-projects/magmalte
            docker-compose build magmalte
      - tag-push-docker:
          project: magmalte
          images: "magmalte"
      - magma_slack_notify

  lte-agw-deploy:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - magma_integ_test:
          stack: lte
          test: 'False'
          build: 'True'
          deploy: 'True'

  feg-build:
    docker:
      - image: facebookconnectivity-ci.jfrog.io/builder:latest
        auth:
          username: $JFROG_LOGIN
          password: $JFROG_PASSWORD
    environment:
      - NMS_ROOT=/root/project/symphony/app/fbcnms-projects/magmalte
      - MAGMA_MODULES_FILE=/root/project/circleci/modules.yml
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login "$DOCKER_FEG_REGISTRY" -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/feg/gateway/docker
            DOCKER_REGISTRY=feg_ docker-compose build --parallel
      - tag-push-docker:
          project: feg
          images: "gateway_go|gateway_python"
          registry: $DOCKER_FEG_REGISTRY
      - magma_slack_notify

  cwag-deploy:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - build/magma-build-shortcircuit:
          stack: cwf
          build: 'True'
      - docker/install-dc
      - run:
          name: Set env
          command: |
            echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
            echo 'export DOCKER_REGISTRY=cwf_' >> $BASH_ENV
      - run:
          name: Create appropriate build tag for upgrades
          command: |
            set +o pipefail

            cd ${MAGMA_ROOT}
            head_magma_subject=$(git --no-pager log --oneline --pretty=format:"%s" -- . | head -n 1)
            rm -rf /tmp/ossmagma
            mkdir -p /tmp/ossmagma
            git clone https://github.com/facebookincubator/magma.git /tmp/ossmagma/magma
            cd /tmp/ossmagma/magma
            opensource_hash=$(git --no-pager log --oneline --pretty=format:"%h" --grep="${head_magma_subject}" | head -n 1)

            cd ${MAGMA_ROOT}/circleci
            mkdir -p versions
            hash=$(git rev-parse HEAD)
            container_version=${hash:0:8}
            if [[ -n ${opensource_hash} ]]; then
              container_version="${container_version}|${opensource_hash}"
            fi
            echo ${container_version} > versions/cwag_version
      - run:
          name: Build CWAG containers
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway/docker
            docker-compose -f docker-compose.yml -f docker-compose.override.yml build --parallel
      - run:
          name: Push CWAG containers
          command: |
            cd ${MAGMA_ROOT}
            ver=$(git rev-parse HEAD)
            ver=${ver:0:8}

            cd ${MAGMA_ROOT}/cwf/gateway/docker
            echo $MAGMA_JFROG_APIKEY > jfrog_key
            for image in cwag_go gateway_go gateway_python gateway_sessiond gateway_pipelined; do
              ../../../orc8r/tools/docker/publish.sh -r facebookconnectivity-magma-docker.jfrog.io -i ${image} -u magmaci-bot -p jfrog_key -v ${ver}
            done
      - persist_to_workspace:
          root: ~/project/fbcode/magma/magma/circleci
          paths:
            - versions/cwag_version
      - magma_slack_notify

  nms-yarn-test:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          name: yarn test
          <<: *appdir
          command: yarn test:ci

  nms-flow-test:
    executor: node
    steps:
      - checkout
      - run:
          name: install flow
          <<: *appdir
          # Extract the specified flow version from the .flowconfig
          command: yarn add --dev -W flow-bin@$(x=$(grep "\[version\]" .flowconfig -A 1 | tail -n 1); echo ${x:1})
      - yarn-install
      - run:
          name: flow typecheck
          <<: *appdir
          command: yarn run flow

  nms-eslint:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          name: eslint
          <<: *appdir
          command: yarn run eslint .

  fossa-analyze:
    docker:
      - image: ubuntu:xenial
    working_directory: /tmp/magma
    environment:
      - MAGMA_ROOT=/tmp/magma
    steps:
      - checkout
      - run: apt update
      - run: apt install -y wget
      - run: wget https://github.com/fossas/fossa-cli/releases/download/v1.0.11/fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: bash -c 'sha256sum fossa-cli_1.0.11_linux_amd64.tar.gz | grep -q 0e20286630a9bc5a17408c81e6ba9003f91a14fdd680b96ca4def400693e028e'
      - run: rm -f /tmp/magma/fossa
      - run: tar xzf fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: cp /tmp/magma/fossa /usr/local/bin/
      - run: ${MAGMA_ROOT}/circleci/fossa-analyze-go.sh

  notify-approval:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - *magma_conditional
      - run:
          name: Send slack message
          command: |
            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            gh_text="Github Commit <https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}>"
            set +o pipefail
            rev=$(git show -s --format='%B' "${CIRCLE_SHA1}" | grep "Differential Revision" | sed 's/^ *Differential Revision: //g')
            set -o pipefail
            if [[ "${rev}" == "" ]]; then
              rev_text="No Differential Revision Found"
            else
              rev_text="Differential Revision: <https://phabricator.intern.facebook.com/${rev}|${rev}>"
            fi

            pretext="All tests have passed, go to <https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}|the build console> if you want to publish deployment artifacts for this revision."
            slack_data=$(cat \<<EOF
            {
              "text": "*All Tests Succeeded, Approval Needed for Publish and Build*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI approval notification",
                  "fields": [
                    {
                      "title": "Revision",
                      "value": "${rev_text}\\n${gh_text}",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK}"

  notify-magma:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - *magma_conditional
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Send slack message
          command: |
            author=$(git show -s --format='%an')
            email=$(git show -s --format='%ae')
            gh_text="Github Commit <https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1:0:8}> by ${author} <${email}>"
            set +o pipefail
            rev=$(git show -s --format='%B' "${CIRCLE_SHA1}" | grep "Differential Revision" | sed 's/^ *Differential Revision: //g')
            set -o pipefail
            if [[ "${rev}" == "" ]]; then
              rev_text="No Differential Revision Found"
            else
              rev_text="Differential Revision: <https://phabricator.intern.facebook.com/${rev}|${rev}>"
            fi

            image_tag=${CIRCLE_SHA1:0:8}
            if [ -f /tmp/workspace/versions/cwag_version ]; then
              cwag_version=$(cat /tmp/workspace/versions/cwag_version)
            else
              cwag_version="NO CWAG BUILT"
            fi
            if [ -f /tmp/workspace/versions/magma_version ]; then
              agw_version=$(cat /tmp/workspace/versions/magma_version)
            else
              agw_version="NO AGW BUILT"
            fi
            pretext="- Containers have been tagged as \`${image_tag}\`\n- Upgrade CWAG to \`${cwag_version}\` in NMS\n- Run \`fab promote:test,beta,${agw_version}\` to dogfood LTE AGW."

            slack_data=$(cat \<<EOF
            {
              "text": "*All Tests and Builds Succeeded!*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": "${pretext}",
                  "fallback": "CircleCI workflow success notification",
                  "fields": [
                    {
                      "title": "Revision",
                      "value": "${rev_text}\\n${gh_text}",
                      "short": false
                    }
                  ]
                }
              ]
            }
            EOF
            )
            curl -X POST -H 'Content-type: application/json' --data "${slack_data}" "${SLACK_WEBHOOK}"

  docusaurus_build_and_deploy:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - run:
          name: Setup docusaurus expected directory structure
          command: |
            mv docs/docusaurus website/
            mv docs/readmes readmes/
            rm -rf docs/
            mv readmes/ docs/
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "docusaurus-bot@users.noreply.github.com"
            git config --global user.name "docusaurus-bot"
            echo "machine github.com login docusaurus-bot password $GITHUB_TOKEN" > ~/.netrc
            cd website && yarn install
            CUSTOM_COMMIT_MESSAGE="[skip ci] Deploy website" GIT_USER=docusaurus-bot yarn run publish-gh-pages

  southpoll_lint:
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Running lints on the devmand image
          command: |
            sudo dnf update -y
            sudo dnf install -y clang-format
            cd ./devmand/gateway/
            ./format
            if [[ $(git diff HEAD --name-only) ]]; then
               echo "############################"
               echo "Changes required!"
               git diff HEAD | less
               echo "Please run the format script"
               echo "############################"
               exit 1
            fi

  southpoll_test:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Testing the Devmand Image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-dev-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/test

  southpoll_publish_dev:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Publishing all southpoll images to southpoll-dev
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-dev-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/push

  southpoll_publish_prod:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Publishing all southpoll images to southpoll-prod
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/push_prod

  southpoll_firstparty:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "orc8r/gateway/c/common"
      - run:
          name: Building southpoll firstparty image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build

  southpoll_thirdparty:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand/gateway/docker/thirdparty"
      - run:
          name: Building southpoll thirdparty image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached
            ./scripts/build

workflows:
  version: 2.1

  # Disabling this job until we spin up more worker capacity
  #magma-lte:
#    jobs:
#      - integ-test:
#          <<: *only_master

  magma:
    jobs:
      - nms-flow-test
      - nms-eslint
      - lte-test
      - cwf-operator-precommit
      - cwag-precommit
      - orc8r-gateway-test
      - nms-yarn-test:
          requires:
            - nms-flow-test
      - insync-checkin
      - fossa-analyze
      - feg-precommit
      - lte-integ-test:
          <<: *only_master
      - cloud-test
      - ci-build:
          <<: *only_master
      - cwf-integ-test:
          requires:
            - cwag-precommit
          <<: *only_master
      #The following lines are only for master.
      - notify-approval:
            <<: *only_master
            <<: *require_test
      - magma-hold:
          type: approval
          requires:
            - notify-approval
      - orc8r-build:
          <<: *only_master
          <<: *require_approval
      - nms-build-deploy:
          <<: *only_master
          <<: *require_approval
      - feg-build:
          <<: *only_master
          <<: *require_approval
      - cwf-operator-build:
          <<: *only_master
          <<: *require_approval
      - lte-agw-deploy:
          <<: *only_master
          <<: *require_approval
      - cwag-deploy:
          <<: *only_master
          <<: *require_approval
      - notify-magma:
          <<: *only_master
          requires:
              - lte-agw-deploy
              - cwag-deploy
              - feg-build
              - nms-build-deploy
              - orc8r-build
      # Those jobs are only run on non-master branch to make sure everything is builidng properly
      # We run different on master that will directly build and if success push
      - orc8r-core-build:
          requires:
            - cloud-test
            - orc8r-gateway-test
            - insync-checkin
          <<: *ignore_master
      - orc8r-noncore-build:
          requires:
            - cloud-test
            - orc8r-gateway-test
            - insync-checkin
          <<: *ignore_master
      - nms-build:
          requires:
              - cloud-test
              - orc8r-gateway-test
          <<: *ignore_master

  # docusaurus_build_and_deploy:
  #   jobs:
  #     - docusaurus_build_and_deploy:
  #         <<: *only_master

  southpoll_test_and_publish:
    jobs:
      # - southpoll_thirdparty
      # - southpoll_firstparty
      - southpoll_lint
      # - southpoll_test
      # - southpoll_publish_dev:
      #     requires:
      #       - southpoll_lint
      #       - southpoll_test
      # - southpoll_publish_prod:
      #     requires:
      #       - southpoll_lint
      #       - southpoll_test
      #     <<: *only_master
